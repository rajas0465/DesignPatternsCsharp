Abstract Factory Design Pattern

The Abstract Factory design pattern provides an interface
for creating families of related or dependent objects without specifying their concrete classes.


Participants

 The classes and objects participating in this pattern include:

    AbstractFactory  (ContinentFactory)
        declares an interface for operations that create abstract products
    ConcreteFactory   (AfricaFactory, AmericaFactory)
        implements the operations to create concrete product objects
    AbstractProduct   (Herbivore, Carnivore)
        declares an interface for a type of product object 
    Product  (Wildebeest, Lion, Bison, Wolf)
        defines a product object to be created by the corresponding concrete factory
        implements the AbstractProduct interface
    Client  (AnimalWorld)
        uses interfaces declared by AbstractFactory and AbstractProduct classes 


Real-world code in C#
#

This real-world code demonstrates the creation of different animal worlds for a computer game
using different factories. Although the animals created by the Continent factories are different,
the interactions among the animals remain the same. 

--------------------------------------------------------------------------------------------------------

Builder Design Pattern

The Builder design pattern separates the construction of a complex object from its representation 
so that the same construction process can create different representations.

Participants
#

The classes and objects participating in this pattern include:

    Builder  (VehicleBuilder)
        specifies an abstract interface for creating parts of a Product object
    ConcreteBuilder  (MotorCycleBuilder, CarBuilder, ScooterBuilder)
        constructs and assembles parts of the product by implementing the Builder interface
        defines and keeps track of the representation it creates
        provides an interface for retrieving the product
    Director  (Shop)
        constructs an object using the Builder interface
    Product  (Vehicle)
        represents the complex object under construction. ConcreteBuilder builds the product's internal representation and
        defines the process by which it's assembled includes classes that define the constituent parts, including interfaces
        for assembling the parts into the final result.

This real-world code demonstates the Builder pattern in which different vehicles are assembled in a step-by-step fashion. 
The Shop uses VehicleBuilders to construct a variety of Vehicles in a series of sequential steps.
